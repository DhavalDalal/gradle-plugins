/*
 *	Minimal usage: 
 *  - place "apply from: 'https://raw.github.com/moksamedia/gradle-plugins/master/jersey-plugin.gradle'" at top of gradle build script
 *  - define extension properties:
 * 
 *      war {
 * 			webXml = file('webxml/webxml.xml')
 * 		}
 *
 *		jersey {
 *			packages = "com.some.package;com.another.package"
 * 			servletName = "My Servlet"
 *			urlPattern = "/*"
 *		}
 *
 */

apply plugin: 'groovy'
apply plugin: 'jetty'
apply plugin: JerseyPlugin

import groovy.xml.XmlUtil
import org.slf4j.Logger
import org.slf4j.LoggerFactory

repositories {
	mavenCentral()
}


dependencies {
    println("Dependencies Called....${project.jersey.jerseyBundle}")
	
	/* JAX-RS (JSR 311) API */
//	compile 'javax.ws.rs:jsr311-api:1.1.1'
	
	/ * JERSEY BUNDLE */
	compile project.jersey.jerseyBundle

	compile gradleApi()
	groovy localGroovy()
		
}

/*
 *	Main class that implements the Jersey plugin. Use with the following:
 *  	apply from: 'https://raw.github.com/moksamedia/gradle-plugins/master/jersey-plugin.gradle'
 * 	
 *  Notes:
 *   - the jetty plugin implies the war plugin. User must define the 'webXml' property of the war
 *     plugin: war { webXml = file("path/to/some/file.xml") }
 */
class JerseyPlugin implements Plugin<Project> {

	Logger log = LoggerFactory.getLogger("build-logger")

	void apply(Project project) {

        println("Apply Called....")
        project.extensions.create('jersey', JerseyPluginExtension)
        project.configurations.create('jersey') {
            extendsFrom project.configurations['compile']
        }
        project.dependencies {
            jersey project.extensions.jersey.jerseyBundle
        }

//		project.extensions.jersey =  new JerseyPluginExtension()
        println("Apply Called....${project.jersey}")
		
		project.task('prepWebXml') {
			
			doLast {

				
				// get the webXml file from the war plugin extension
				File webXml = project.war.webXml

				// make sure it is not null
				if (webXml == null) {
					throw new GradleException("Property \"webXml\" for plugin \"war\" is not defined!")
				}
					
				// if it doesn't exist, generate it
				if (!webXml.exists()) {	
				
					log.info "web.xml file does not exist. Creating \"${webXml.canonicalPath}\""
				
					File parentDir = new File(webXml.getParent())
					if (!parentDir.exists()) parentDir.mkdirs()
				
					webXml.write("""<?xml version="1.0" encoding="utf-8"?><web-app><servlet></servlet><servlet-mapping></servlet-mapping></web-app>""")		
				}
			
				// parse the web.xml file and replace the servlet and servlet-mapping nodes
			
				def xml = new XmlParser().parse(webXml)

				xml.servlet.replaceNode {
					servlet {
						'servlet-name'(project.jersey.servletName)
						'servlet-class'(project.jersey.servletContainerClass)
						'init-param' {
							'param-name'(project.jersey.servletContainerPackage)
							'param-value'(project.jersey.packages)
						}
					}
				}

				xml.'servlet-mapping'.replaceNode {
					'servlet-mapping' {
						'servlet-name'(project.jersey.servletName)
						'url-pattern'(project.jersey.urlPattern)
					}
				}

				// serialize xml to string
				String output = XmlUtil.serialize((Node)xml)

				log.info "web.xml updated with packages=${project.jersey.packages}, servletName=${project.jersey.servletName}, and urlPattern=${project.jersey.urlPattern}"

				// write serialized XML to web.xml file
				webXml.write(output)
				
			}

		}
		
		// setup dependency for war so prepWebXml is run
		project.war.dependsOn project.prepWebXml
			
	}

}

// Define the Jersey extension properties
class JerseyPluginExtension {
//    private Project project
	String packages
	String servletName
	String urlPattern
    String jerseyBundle
    String servletContainerClass
    String servletContainerPackage

//    JerseyPluginExtension(Project project) {
//        project.logger.info "creating jersey plugin extension"
//        this.project = project
//
//        packages = project.jersey.packages?: ''
//        servletName = project.jersey.servletName?: 'Jersey Servlet'
//        urlPattern = project.jersey.urlPattern?: '/*'
//        jerseyBundle = project.jersey.jerseyBundle?: 'com.sun.jersey:jersey-bundle:1.17'
//        servletContainerClass =  project.jersey.servletContainerClass?: 'com.sun.jersey.spi.container.servlet.ServletContainer'
//        servletContainerPackage = project.jersey.servletContainerPackage?: 'com.sun.jersey.config.property.packages'
//    }
}
